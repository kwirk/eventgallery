<?php
require_once 'lib/numeric_range.php';

/** 
 * Used to validate Mbs Uploaded Files.
 * 
 * This class is generated by the multi bit shift generator, and is used to
 * specify the validation parameters for individual files.  To use the class,
 * the constants should be modified so that a index exists for each validation set.
 *
 * In the default demo configuration, the hash index files is used to represent one particular column. 
 *
 * This class should be used in conjunction with the automatic_mbs_validation method that we include 
 * in active record, and as the validation_object passed in the options has to the multi_bit_shift_field
 * helper.  Example:
 *
 *   Should be included in the main class, and in the file class
 *   
 *   automatic_mbs_validation ValidateMbsFile.new("files")
 *
 *   The helper would be used in a form, and passes the validation params to the flash applet.
 *   
 * @package multi_bit_shift_php_plugin
 */
class ValidateMbsFile {
	// Customize these values for each individual validation set
	
	/**
	 * Contains the string names of the main classes that will be used.  (i.e. The one that will have files associated with it, but not contain the files)
	 * @var array
	 */
	var $MAIN_CLASS = array("files" => "Testa");
	
	/** 
	 * Contains the string names of the classes that will possess each file.
	 * @var array
	 */
	var $FILE_CLASS = array("files" => "MbsFile");	
	
	/** 
	 * Contains the column in the main class that files will be assoicated with
	 * @var array
	 */
	var $MAIN_COLUMN = array("files" => "files");
	
	/** 
	 * Contains the column in the file class that actually represents the file.
	 * @var array
	 */
	var $FILE_COLUMN = array("files" => "file_name");
	
	/** 
	 * Minimum number of files that can be uploaded
	 * @var array
	 */
	var $MINIMUM_FILES = array("files" => 1);
	
	/** 
	 * Maximum number of files that can be uploaded
	 * @var array
	 */
	var $MAXIMUM_FILES = array("files" => 3000);
	
	/** 
	 * Minimum size of each file
	 * @var array
	 */
	var $MINIMUM_FILE_SIZE = array("files" => 0);
	
	/** 
	 * Maximum size of each file, in bytes
	 * @var array
	 */
	var $MAXIMUM_FILE_SIZE = array("files" => 10485760);
	
	/** 
	 * Maximum size of all files combined.
	 * @var array
	 */
	var $MAXIMUM_TOTAL_FILE_SIZE = array("files" => 314572800);
	
	// These two items are optional, in the sense that the constants must still appear, but the hash values don't need to be defined.
	/** 
	 * Possible file types
	 * @var array
	 */
	var $FILE_TYPES = array("files" => array("jpg", "JPG"));
	
	/** 
	 * Description of possible file types.
	 * @var array
	 */
	var $FILE_TYPE_NAME = array("files" => "Image Files");
	
	// No Customization should be needed after this point.
	
	/**
	 * Internal variable that specifies which index the validation pertains to.
	 * @var string
	 */
	var $selected_item;
	
	/** 
	 * Initializes the object and sets the key that the validation methods will draw from.  In other words,
	 * if the validation options you wish to use are specified by the "files" key, "files" is the appropriate
	 * parameter for this method.
	 */	
	function ValidateMbsFile($item) {
		$this->selected_item = $item;
	}
	
	/**
	 * Returns the main class for the specified key
	 * @return string name of the main class
	 */
	function main_class() {
		return $this->MAIN_CLASS[$this->selected_item];
	}
	
	/**
	 * Returns the file class for the specified key
	 * @return string name of the file class
	 */
	function file_class() {
		return $this->FILE_CLASS[$this->selected_item];
	}
	
	/**
	 * Returns the main column for the specified key
	 * @return string name of the main column
	 */
	function main_column() {
		return $this->MAIN_COLUMN[$this->selected_item];
	}
	
	/**
	 * Returns the file column for the specified key
	 * @return string name of the file column
	 */
	function file_column() {
		return $this->FILE_COLUMN[$this->selected_item];
	}
	
	/**
	 * Returns the minimum number of files for the specified key
	 * @return int minimum number of files for the specified key
	 */
	function minimum_files() {
		return $this->MINIMUM_FILES[$this->selected_item];
	}
	
	/**
	 * Returns the maximum number of files for the specified key
	 * @return int maximum number of files for the specified key
	 */
	function maximum_files() {
		return $this->MAXIMUM_FILES[$this->selected_item];
	}
	
	/**
	 * Returns the minimum file size for the specified key
	 * @return int minimum file size for the specified key
	 */
	function minimum_file_size() {
		return $this->MINIMUM_FILE_SIZE[$this->selected_item];
	}
	
	/**
	 * Returns the maximum file size for the specified key
	 * @return int maximum file size for the specified key
	 */
	function maximum_file_size() {
		return $this->MAXIMUM_FILE_SIZE[$this->selected_item];
	}
	
	/**
	 * Returns the maximum total file size for the specified key
	 * @return int maximum total file size for the specified key
	 */
	function maximum_total_file_size() {
		return $this->MAXIMUM_TOTAL_FILE_SIZE[$this->selected_item];
	}
	
	/**
	 * Returns the file types for the specified key
	 * @return array file types for the specified key
	 */
	function file_types() {
		if (isset($this->FILE_TYPES[$this->selected_item])) {
			return $this->FILE_TYPES[$this->selected_item];
		} else {
			return null;
		}
	}
	
	/**
	 * Returns the file type name for the specified key
	 * @return string file type name for the specified key
	 */
	function file_type_name() {
		if (isset($this->FILE_TYPE_NAME[$this->selected_item])) {
			return $this->FILE_TYPE_NAME[$this->selected_item];
		} else {
			return null;
		}
	}
	
	/**
	 * Converts the parameters of this object into a hash that can be merged with the options hash in the multi_bit_shift_field helper.
	 * @return array HashMap of key value pairs for validation.
	 */
	function convert_to_flash_params() {
		if (is_array($this->file_types())&&is_string($this->file_type_name())) {			
			$options = array("fileLabel" => $this->file_type_name(), "fileExtensions" => ("*.".implode(';*.', $this->file_types())));
		} else {
			$options = array();
		}
		return array_merge($options, array("maximumFileBytes" => (string)$this->maximum_file_size(), 
			"maximumFilesOnServer" => (string)$this->maximum_files(), "maximumBytesOnServer" => (string)$this->maximum_total_file_size()));
	}
	
	/**
	 * Returns the range of files that the selected key can have
	 * @return NumericRange range of files
	 */
	function number_of_files_range() {
		return new NumericRange($this->minimum_files(), $this->maximum_files());
	}
	
	/**
	 * Returns the range of file sizes that the selected key can have.
	 * @return NumericRange range of file sizes
	 */
	function file_size_range() {
		return new NumericRange($this->minimum_file_size(), $this->maximum_file_size());
	}
	
	/**
	 * This should be used to validate files when you upload them.  It checks the number of files, the type of the file,
	 * and the file size.  The file parameter expects the full path to the file on the disk, and the files_on_server parameter
	 * should be the number of files on the server, including this file.  In other words, if there are currently two file on the server,
	 * and this one was just uploaded, files_on_server would be 3 with this file.
	 * @param string Full path to the file on the disk
	 * @param int Number of files on the server, including any just uploaded file(s).
	 * @return boolean True if file is valid, false otherwise
	 */
	function validate_file($file, $files_on_server) {
		return ($this->validate_file_size($file)&&$this->validate_file_extension($file)&&
			$this->validate_files_less_than_maximum($files_on_server));
	}
	
	/** 
	 * Validates that the file size is in the file size range.
	 * @param string Full path to the file on the disk
	 * @return boolean True if file is in size range, false otherwise.
	 */
	function validate_file_size($file) {
		$obj = $this->file_size_range();
		return ($obj->inRangeInclusive(filesize($file)));
	}
	
	/**
	 * Validates that the file is of the correct type.  You may want to check the file
	 * mime type as well, this is a very basic check.
	 * @param string Full path to the file on the disk
	 * @return boolean True if file is valid extension, false otherwise.
	 */
	function validate_file_extension($file) {
		// split the file name into an array seperated by periods, and get the last element
		// then see if that last element is in the file_types array.
		return (in_array(end(explode('.', basename($file))), $this->file_types()));
	}
	
	/**
	 * Validates that the number of files on the server is within the appropriate range.
	 * @param int Number of files on the server, including any just uploaded file(s).
	 * @return boolean True if files on server is in size range, false otherwise.
	 */
	function validate_files_on_server($files_on_server) {
		$obj = $this->number_of_files_range();
		return ($obj->inRangeInclusive($files_on_server));
	}
	
	/**
	 * Validates that the number of files on the server is below the maximum.
	 * @param int Number of files on the server, including any just uploaded file(s).
	 * @return boolean True if files on server is in size range, false otherwise.
	 */
	function validate_files_less_than_maximum($files_on_server) {
		$obj = $this->number_of_files_range();
		return ($obj->atMostMaximum($files_on_server));
	}
	
	
	
}
?>
